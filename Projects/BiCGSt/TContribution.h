// -*- c++ -*-
/* Generated by Together */
#ifndef TCONTRIBUTION_H
#define TCONTRIBUTION_H
#include "oopobjectid.h"
#include <vector>
#include "bicgdefs.h"
class   OOPDataVersion;
using namespace std;

/**
 * @brief Implements the necessary information regarded to contribution from one partition \f$ i \f$ to a partition \f$ j \f$.
 */
/**
 * Objects of this class populates a matrix which relates partition \f$ i \f$ to par-
 * tition \f$ i \f$. Each (\f$i\f$,\f$j\f$) member of this matrix holds a copy of TComtribution.
 * Implements the number of contributing vectors the partition \f$ i \f$ contains
 * addressed to partition \f$ i \f$.
 */
class TContribution : public TPZSaveable
{
      public:
      long GetClassID(){
          return TCONTRIBUTION_ID;
          }
    /**
     * @brief Returns the contribution vector identified by the index parameter
     * @param index Identifies each vector to be returned
     * @since 23/05/2003 
     */
	vector < int >&DestinationVector (int index);
    /**
     * @brief Initializes the structure randomically
     * @since 13/06/2003 
     */
	void    InitializeRandom ();
	        TContribution ();
    /**
     * @brief Returns the number of volume indices to which relation will contribute
     */
	int     NContributions ()
	{
		return fNContributions;
	}
    /**
     * @brief returns whether this contribution holds a single index or not
     * @return true if no relation
     */
	int     IsEmpty ();
	/**
	 * @brief Operator overloaded
	 */
	TContribution & operator = (const TContribution & contr);
	/**
	 * @brief Operator overloaded
	 */
	bool    operator == (const TContribution & contr);
	void    SetMeshId (OOPObjectId & id)
	{
		fDestinationMesh = id;
	}
  /**
   * @brief Packs the object in on the buffer so it can be transmitted through the network. \n
   * The Pack function  packs the object's class_id while function Unpack() doesn't,
   * allowing the user to identify the next object to be unpacked.
   * @param buf A pointer to TSendStorage class to be packed.
   */
	int Write(OOPStorageBuffer * buf,int classid);
  /**
   * @brief Unpacks the object class_id
   * @param buf A pointer to TSendStorage class to be unpacked.
   */
	int Read(OOPStorageBuffer * buf,void *context);
      private:
    /**
     * @brief ObjectId of the destination mesh
     */
	OOPObjectId fDestinationMesh;
    /**
     * @brief Holds the volume indices of the origin partition. 
     */
	vector < int >fFrom;
    /**
     * @brief Holds the volume indices which will receive the contributions. 
     */
	vector < int >fTo;
    /**
     * @brief Holds the indexes of local TMBData which will contribute on neighbor par-
     * tition. Each element on the TMBData has its destination indexes on each
     * TMBData of the fDestination
     */
	vector < vector<int> >fLocalIndices;
    /**
     * @brief Indicates the number of contributions between fFrom and fTo partitions. \n
     * This data could be obtained from the size of the vectors
     */
	int     fNContributions;
};

#endif // TCONTRIBUTION_H
