/* Generated by Together */

#include "TLoopFor.h"
#include "TDotProduct.h"
#include <oopmetadata.h>
#include <ooptaskmanager.h>
#include <oopcommmanager.h>

void TLoopFor::SubmitIf(){
 //if(rho_1==0) tol = Norm(r)/normb
// int i, nproc;

 OOPDataVersion version = fDataDepend.Dep(fId_rho_1).ObjPtr()->Version();
 version.DecreaseLevel();
 version.Increment();

 OOPDataVersion tolVersion = fDataDepend.Dep(fId_tol).ObjPtr()->Version();
 tolVersion.IncrementLevel(-1);
 /*
 TIfConditional * ifcond = new TIfConditional(0);
 ifcond->AddDependentData(OOPMDataDepend(fId_rho_1, ERead, version));
 ifcond->AddDependentData(OOPMDataDepend(fId_tol, EWrite, tolVersion));
 ifcond->AddDependentData(OOPMDataDepend(fId_normr, ERead, tolVersion));
 ifcond->AddDependentData(OOPMDataDepend(fId_normb, ERead, tolVersion));
 ifcond->Submit();
 
  * fId_tol will be incremented anyway -->n+1
  */
}
TLoopFor::TLoopFor(int proc) : OOPTask(proc) {}

OOPMReturnType TLoopFor::Execute ()
{
  /**
   * Submit the dot product between rtilde and r
   */
  SubmitDistDotProduct(f_lId_rtilde, f_lId_r);

  /**
   * Submit the if conditional.
   * fId_tol incremented.
   */
  SubmitIf();

  /**
   * Submits the second if on the loop instruction.
   */
  SumbmitSecondIf();
   
	return ESuccess;
}
void TLoopFor::SumbmitSecondIf(){
  OOPDataVersion version;
  version = fDataDepend.Dep(fId_max_iter).ObjPtr()->Version();
 /* TSecondIf * sec = new TSecondIf(0);
  sec->AddDependentData(OOPMDataDepend(fId_max_iter, EVersion, version));
  sec->AddDependentData(OOPMDataDepend(fId_beta, EVersion, version));
  sec->AddDependentData(OOPMDataDepend(fId_rho_1, EVersion, version));
  sec->AddDependentData(OOPMDataDepend(fId_rho_2, EVersion, version));
  sec->AddDependentData(OOPMDataDepend(fId_alpha, EVersion, version));
  sec->AddDependentData(OOPMDataDepend(fId_omega, EVersion, version));
*/
  //dentro de um for para todos os processadores
  int i, nproc;
  nproc = CM->NumProcessors();
  for(i=0;i<nproc;i++){
  /*  sec->AddDependentData(OOPMDataDepend(f_lId_p[i], EVersion, version));
    sec->AddDependentData(OOPMDataDepend(f_lId_r[i], EVersion, version));
    sec->AddDependentData(OOPMDataDepend(f_lId_v[i], EVersion, version));
    */
  }
  //sec->Submit();
}
void TLoopFor::SubmitDistDotProduct(vector<OOPObjectId> & Id1, vector<OOPObjectId> &Id2)
{
  int i, nproc = CM->NumProcessors();
  TDotProduct * dotprod;
  /**
   * Setting the correct version for the rho_1 object
   */
  OOPDataVersion version = fDataDepend.Dep(fId_rho_1).ObjPtr()->Version();
  version.IncrementLevel(nproc);
  fDataDepend.Dep(fId_rho_1).ObjPtr()->SetVersion(version, Id());
  /**
   * Setting the level version for the dependency relation according to dotprod
   */
  version.SetLevelVersion(3,-1);
  for(i=0;i<nproc;i++){
    dotprod = new TDotProduct(i);
    dotprod->AddDependentData(OOPMDataDepend(fId_rho_1, EWriteAccess, version));
    OOPDataVersion rtildeVersion = fDataDepend.Dep(f_lId_rtilde[i]).ObjPtr()->Version();
    dotprod->AddDependentData(OOPMDataDepend(f_lId_rtilde[i],EReadAccess,rtildeVersion));
    OOPDataVersion rVersion = fDataDepend.Dep(f_lId_r[i]).ObjPtr()->Version();
    dotprod->AddDependentData(OOPMDataDepend(f_lId_r[i],EReadAccess,rVersion));
    dotprod->Submit();
  }
}

long TLoopFor::ExecTime ()
{
	return -1;
}
void TLoopFor::SetupVersions(){
  int i;
	OOPDataVersion auxver;

	auxver = fDataDepend.Dep(fId_max_iter).ObjPtr()->Version();
	auxver.IncrementLevel(-1);
	fDataDepend.Dep(fId_max_iter).ObjPtr()->SetVersion(auxver, Id());


	auxver = fDataDepend.Dep(fId_rho_1).ObjPtr()->Version();
	auxver.IncrementLevel(-1);
	fDataDepend.Dep(fId_rho_1).ObjPtr()->SetVersion(auxver, Id());


	auxver = fDataDepend.Dep(fId_rho_2).ObjPtr()->Version();
	auxver.IncrementLevel(-1);
	fDataDepend.Dep(fId_rho_2).ObjPtr()->SetVersion(auxver, Id());

  auxver = fDataDepend.Dep(fId_alpha).ObjPtr()->Version();
	auxver.IncrementLevel(-1);
	fDataDepend.Dep(fId_alpha).ObjPtr()->SetVersion(auxver, Id());

	auxver = fDataDepend.Dep(fId_omega).ObjPtr()->Version();
	auxver.IncrementLevel(-1);
	fDataDepend.Dep(fId_omega).ObjPtr()->SetVersion(auxver, Id());

	auxver = fDataDepend.Dep(fId_beta).ObjPtr()->Version();
	auxver.IncrementLevel(-1);
	fDataDepend.Dep(fId_beta).ObjPtr()->SetVersion(auxver, Id());

	auxver = fDataDepend.Dep(fId_normb).ObjPtr()->Version();
	auxver.IncrementLevel(-1);
	fDataDepend.Dep(fId_normb).ObjPtr()->SetVersion(auxver,Id());

	auxver = fDataDepend.Dep(fId_tol).ObjPtr()->Version();
	auxver.IncrementLevel(-1);
	fDataDepend.Dep(fId_tol).ObjPtr()->SetVersion(auxver, Id());

  auxver = fDataDepend.Dep(fId_normr).ObjPtr()->Version();
	auxver.IncrementLevel(-1);
	fDataDepend.Dep(fId_normr).ObjPtr()->SetVersion(auxver, Id());

	auxver = fDataDepend.Dep(fId_resid).ObjPtr()->Version();
	auxver.IncrementLevel(-1);
	fDataDepend.Dep(fId_resid).ObjPtr()->SetVersion(auxver, Id());

  int nproc = CM->NumProcessors();
  for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_p[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_p[i]).ObjPtr()->SetVersion(auxver, Id());
	}

  for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_A[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_A[i]).ObjPtr()->SetVersion(auxver, Id());
	}

	for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_M[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_M[i]).ObjPtr()->SetVersion(auxver, Id());
	}

	for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_v[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_v[i]).ObjPtr()->SetVersion(auxver, Id());
	}

	for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_phat[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_phat[i]).ObjPtr()->SetVersion(auxver, Id());
	}

	for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_s[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_s[i]).ObjPtr()->SetVersion(auxver, Id());
	}

	for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_x[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_x[i]).ObjPtr()->SetVersion(auxver, Id());
	}

	for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_shat[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_shat[i]).ObjPtr()->SetVersion(auxver, Id());
	}

	for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_t[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_t[i]).ObjPtr()->SetVersion(auxver, Id());
	}

	for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_rtilde[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_rtilde[i]).ObjPtr()->SetVersion(auxver, Id());
	}

	for(i=0;i<nproc;i++){
		auxver = fDataDepend.Dep(f_lId_r[i]).ObjPtr()->Version();
  	auxver.IncrementLevel(-1);
  	fDataDepend.Dep(f_lId_r[i]).ObjPtr()->SetVersion(auxver, Id());
	}
	
}
