/* Generated by Together */

#include "TParAnalysis.h"
void TParAnalysis::ComputeFlux(){

        // message #1.1 to pc:TParCompute
        TParCompute * pc = new TParCompute(Procid);

        // message #1.2 to table:TPartitionRelation
        TPartitionRelation * table = null;
        int npartitions = table->GetNPartitions();

        // message #1.3 to rhs:TParRhs
        TParRhs * rhs = new TParRhs(ProcId, Trace);

        // message #1.4 to state:TParState
        TParState * state = new TParState(ProcId, Trace);

        // message #1.5 to mesh:TParMesh
        TParMesh * mesh = new TParMesh(ProcId, Trace);

        // message #1.6 to ver:OOPDataVersion
        OOPDataVersion * ver = new OOPDataVersion();

        // message #1.7 to ver:OOPDataVersion
        ver->SetLevelVersion(level, version);
        for (i = 0; i < npartitions; i++) {
            // message #1.8.1 to DM:OOPDataManager
            OOPDataManager * DM = null;
            OOPObjectId rhsId = DM->SubmitObject(rhs, 1);

            // message #1.8.2 to pc:TParCompute
            pc->SetRhsId(rhsId);

            // message #1.8.3 to DM:OOPDataManager
            OOPObjectId stateId = DM->SubmitObject(state);

            // message #1.8.4 to pc:TParCompute
            pc->SetStateId(stateId);

            // message #1.8.5 to DM:OOPDataManager
            OOPObjectId meshId = DM->SubmitObject(mesh);

            // message #1.8.6 to pc:TParCompute
            pc->AddDependentData(stateId, st, version);

            // message #1.8.7 to pc:TParCompute
            pc->AddDependentData(rhsId, st, version);
        }
        // message #1.9 to pc:TParCompute
        OOPObjectId oOPObjectId = pc->Submit();
    }
