// -*- c++ -*-
/* Generated by Together */

#ifndef TPARANALYSIS_H
#define TPARANALYSIS_H

#include "TParCompute.h"
#include "TParMesh.h"
#include "oopdatamanager.h"
#include "ooptask.h"
#include "oopdataversion.h"
#include "fluxdefs.h"

/**
 * Implements the functionalities of the Analysis classes incorporating
 * parallelization optimization.
 * This class is not part of the parallel environment, although it make some calls to the Data and Task manager.
 * Its an auxiliar class which triggers the environment.
 */
class   TParAnalysis:public OOPTask
{
      public:

	TParAnalysis (int Procid);
	        TParAnalysis (int Procid, int numpartitions);
    /**
     * Initializes and submit all necessary data and tasks to the Data and Task managers. 
     */
	void    SetupEnvironment ();

	virtual long GetClassID ()
	{
		return TPARANAYSIS_ID;
	}
    /**
     * Sets the version of the mesh, state and rhs to random values and creates the parcompute task
     */
	void    CreateParCompute ();

    /**
     * Sets the version of the rhs and state appropriate for the TParCompute class to kick in
     */
	void    SetAppropriateVersions ();

    /**
     * Modify the solution version to adequate the TParCompute tasks
     */
	void    AdaptSolutionVersion (OOPDataVersion & version);

	virtual OOPMReturnType Execute ();

	void    Print (ostream & out = cout);

  /**
   * Packs the object in on the buffer so it can be transmitted through the network.
   * The Pack function  packs the object's class_id while function Unpack() doesn't,
   * allowing the user to identify the next object to be unpacked.
   * @param *buff A pointer to TSendStorage class to be packed.
   */
	virtual int Pack (OOPSendStorage * buf);
  /**
   * Unpacks the object class_id
   * @param *buff A pointer to TSendStorage class to be unpacked.
   */
	virtual int Unpack (OOPReceiveStorage * buf);

	static OOPSaveable *Restore (OOPReceiveStorage * buf);


      private:
	OOPObjectId fRelationTable;
	int     fNumPartitions;
	OOPDataVersion fTaskVersion;
	vector < OOPObjectId > fRhsId;
	vector < OOPObjectId > fMeshId;
	vector < OOPObjectId > fStateId;
};
#endif // TPARANALYSIS_H
