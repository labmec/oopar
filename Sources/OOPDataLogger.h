/* Generated by Together */

#ifndef OOPDATALOGGER_H
#define OOPDATALOGGER_H

#include "oopdatamanager.h"

class OOPDMOwnerTask;
class OOPDMRequestTask;
struct LogStructure{
	int ProcId;
	OOPObjectId ObjId;
	string Action;
	string State;
	OOPDataVersion Version;
	OOPObjectId TaskId;
	int ProcoOrigin;
	string comment;
};

class OOPDataLogger {//: public OOPSaveable {
public:
	void LogReleaseAccess(int proc, OOPObjectId & Id,
							OOPMDataState state, int targetproc,
							OOPObjectId & taskId,
							 OOPMDataState currentstate, OOPDataVersion & version);
	void LogSetVersion(int proc, OOPObjectId & Id, OOPDataVersion & oldver,
					const OOPDataVersion & newver,
					OOPMDataState state,
					const OOPObjectId & TaskId);
	void LogGeneric(int proc, OOPObjectId & Id, char * msg);	
	void GrantAccessLog(int proc, 
						const OOPObjectId & objId,
						OOPMDataState mstate,
						const OOPDataVersion & version,
						int procorig);
	void GrantAccessLog(int proc, 
						const OOPObjectId & objId,
						OOPMDataState mstate,
						const OOPDataVersion & version,
						int procorig,
						OOPObjectId & taskId,
						OOPMDataState currentstate);
	void SubmitAccessRequestLog(int proc, 
								const OOPObjectId & objId,
								OOPMDMOwnerMessageType mtype,
								OOPMDataState mstate,
								OOPMDataState currentstate,
								const OOPDataVersion & version,
								int procorig, const OOPObjectId & taskId);
    /**
     * Simple constructor 
     */
    OOPDataLogger();


    /**
     * Constructor which takes the filename parameter
     * @param outfilename Logger will be generated on that file 
     */
    OOPDataLogger(char * logfilename);
	~OOPDataLogger();

	/**
 	 * Generates logs on the GrantAccess method of the OOPMetaData class
	 * @param town OOPDMOwnerTask object upon which the logging information will
	 * be obtained
	 * @since 16/09/2003
	 * @author longhin
 	 */
	void SendGrantAccessLog(OOPDMOwnerTask *town, int processor);

    /**
     * @param town OwnerTask to be 
     */
    void SendOwnTask(OOPDMOwnerTask *town);
    void ReceiveOwnTask(OOPDMOwnerTask *town);


	void SendReqTask(OOPDMRequestTask *req);
	void ReceiveReqTask(OOPDMRequestTask *req);

    void CancelTask(OOPMetaData &data);

private:
	/**
 	 * Generates the header on the logger file
	 */
	void GenerateHeader();
	void PrintLog();
	char * GetStateName(OOPMDataState state);

    /**
     * Output stream for the logging generation
     * @since 18/09/2003 
     */
    ofstream fLogger;
	LogStructure fLog;
	
};
extern OOPDataLogger * LogDM;
#endif //OOPDATALOGGER_H
