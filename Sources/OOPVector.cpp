/* Generated by Together */

#include "OOPVector.h"
#include <pzlog.h>

#ifdef LOG4CXX
#include <log4cxx/logger.h>
#include <log4cxx/basicconfigurator.h>
#include <log4cxx/propertyconfigurator.h>
#include <log4cxx/helpers/exception.h>
using namespace log4cxx;
using namespace log4cxx::helpers;
static LoggerPtr logger(Logger::getLogger("OOPAR.OOPVector"));
#endif

#define OOPVECINT_ID 4040
#define OOPVECDOUBLE_ID 4041
template class TPZRestoreClass<OOPVector < int > , OOPVECINT_ID>;
template class TPZRestoreClass<OOPVector < REAL > , OOPVECDOUBLE_ID>;	
	
template<>
OOPVector<REAL>::~OOPVector(){}

template<>
OOPVector<int>::~OOPVector(){}
	
template<>
int OOPVector<REAL>::ClassId() const {
    return OOPVECDOUBLE_ID;
}

template<>
int OOPVector<int>::ClassId() const {
    return OOPVECINT_ID;
}

template <class T>
void OOPVector<T>::Read(TPZStream & buf, void * context){
    TPZSaveable::Read(buf, context);
    int size = 0;
    buf.Read(&size);
    fVecValue.Resize(size);
    buf.Read(&fVecValue[0], size);
    int clsid=0;
    buf.Read(&clsid);
    if(clsid!=ClassId()){
        LOGPZ_WARN(logger, "ClassId mismatch on OOPVector::Read");
    }
}
template <class T>
void OOPVector<T>::Write(TPZStream & buf, int withclassid){
    TPZSaveable::Write(buf, withclassid);
    int size = fVecValue.NElements();
    buf.Write(&size);
    buf.Write(&fVecValue[0], size);
    int clsid = ClassId();
    buf.Write(&clsid);
}
