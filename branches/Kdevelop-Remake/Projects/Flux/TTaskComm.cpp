/* Generated by Together */
#include "oopdatamanager.h"
#include "TTaskComm.h"
#include "TParCompute.h"
#include "fluxdefs.h"
class TPZStream;
void TTaskComm::Read (TPZStream & buf, void * context)
{
	OOPTask::Read (buf);
}
void TTaskComm::Write (TPZStream & buf, int withclassid)
{
	OOPTask::Write (buf);
}
OOPMReturnType TTaskComm::Execute ()
{
	int i;
	for (i = 0; i < fDataDepend.NElements (); i++) {
		if (fDataDepend.Dep (i).State () == EWriteAccess) {
			// dat->IncrementVersion();
			// DM->GetObjPtr(i->fDataId)->IncrementVersion();
#ifdef VERBOSE
			cout << "TTaskComm object id ";
			fDataDepend.Dep (i).ObjPtr ()->Id ().Print (cout);
			cout << "TTaskComm::Execute the previous version is " << endl;
			fDataDepend.Dep (i).ObjPtr ()->Version ().Print (cout);
#endif
			TaskLog << "TTaskComm object id " << fDataDepend.Dep (i).ObjPtr ()->Id ();
			TaskLog << "TTaskComm::Execute the previous version is "
				<< fDataDepend.Dep (i).ObjPtr ()->Version () << endl;
			OOPDataVersion ver =
				fDataDepend.Dep (i).ObjPtr ()->Version ();
			ver.Increment ();
			fDataDepend.Dep (i).ObjPtr ()->SetVersion (ver,
								   this->
								   Id ());
#ifdef VERBOSE
			cout << "TTaskComm::Execute the new version is " <<
				endl;
			fDataDepend.Dep (i).ObjPtr ()->Version ().
				Print (cout);
#endif
			TaskLog << "TTaskComm::Execute the new version is " <<
				fDataDepend.Dep (i).ObjPtr ()->Version () << endl;
		}
	}
	TaskFinished ();
	return ESuccess;	// execute the task, verifying that
}
TTaskComm::TTaskComm():OOPTask(){}
TTaskComm::TTaskComm (int ProcId):OOPTask (ProcId)
{
}
TPZSaveable *TTaskComm::Restore (TPZStream & buf, void * context) {
	TTaskComm *loc = new TTaskComm;//(0);
	loc->Read(buf);
	return loc;
}
