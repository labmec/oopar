/* Generated by Together */

#include "tmultitask.h"
//#include "../gnu/gnudefs.h"
#include "TTaskTest.h"

//class OOPSendStorage;
class OOPStorageBuffer;

class OOPSaveable;

OOPSaveable * TMultiTask::Restore(OOPStorageBuffer *buf){
	TMultiTask *t = new TMultiTask(0);
	t->Unpack(buf);
	return t;
}


TMultiTask::TMultiTask(int proc) : OOPTask(proc){
	fProc= proc;
}
void TMultiTask::SetData(TMultiData & data, TResultData & resdata){
	//Identificar qual a versão do dado
}

int TMultiTask::DerivedFrom(char *classname){
  if(!strcmp(ClassName(),classname)) return 1;
  //return OOPSaveable::DerivedFrom(classname);
}
int TMultiTask::DerivedFrom(long Classid){
  if(Classid == GetClassID()) return 1;
  //return OOPSaveable::DerivedFrom(Classid);
}
int TMultiTask::Pack(OOPStorageBuffer *buf)
{
  OOPTask::Pack(buf);
  return 0;
}
int TMultiTask::Unpack( OOPStorageBuffer *buf )
{
	//OOPSaveable::Unpack(buf);
	OOPTask::Unpack(buf);
	long clid;
	buf->UpkLong(&clid);
	if(clid != LONGVEC_ID) {
    cout << __PRETTY_FUNCTION__ << "wrong class id" << endl;
		exit(-1);
	}
	//fTaskDepend.Unpack(buf);
	return 0;
}
OOPMReturnType TMultiTask::Execute(){
	cout << "Calling Execute method on TMultiTask" << endl;
	cout << "New tasks are going to be created" << endl;
	
	OOPObjectId data_id[3], task_id[3];
	TTaskTest * EvalExternalFace= new TTaskTest(0);
	TTaskTest * EvalBCFace = new TTaskTest(0);
	TTaskTest * EvalInternalFace = new TTaskTest(0);
	
	
	TMultiData * ExtSet = new TMultiData;
	TMultiData * BCSet = new TMultiData;
	TMultiData * InternalSet = new TMultiData;
	
	
	/**
		Encontrar dentre os dados que já estão com as dependencias definidas
	qual o Rhs e aumentar a cardinalidade deste.
	*/
	
	
	data_id[0] = DM->SubmitObject(ExtSet, 0);
	data_id[1] = DM->SubmitObject(BCSet, 0);
	data_id[2] = DM->SubmitObject(InternalSet, 0);
	
	
	OOPMDataState st = EReadAccess;
	OOPMDataState write = EWriteAccess;
	OOPDataVersion ver;
	OOPDataVersion verRhs;
	
	//Increments the metadata cardinality with depth 3
	DM->IncrementLevel(RhsId, 3, fProc);
	
	
	verRhs.IncrementLevel(3);
	verRhs.SetLevelVersion(0,-1);
	verRhs.SetLevelVersion(1,0);
	
	verRhs.Print(cout);
	
	EvalExternalFace->AddDependentData(data_id[0], st, ver);
	EvalExternalFace->AddDependentData(RhsId, write, verRhs);
	
	verRhs.SetLevelVersion(1,1);
	EvalBCFace->AddDependentData(data_id[1], st, ver);
	EvalBCFace->AddDependentData(RhsId, write, verRhs);
	
	verRhs.Print(cout);
	
	verRhs.SetLevelVersion(1,2);
	EvalInternalFace->AddDependentData(data_id[2], st, ver);
	EvalInternalFace->AddDependentData(RhsId, write, verRhs);

	verRhs.Print(cout);
	
	task_id[0]=EvalExternalFace->Submit();
	task_id[1]=EvalBCFace->Submit();
	task_id[2]=EvalInternalFace->Submit();
	
	
	TaskFinished();
	return ESuccess; // execute the task, verifying that
}
long TMultiTask::ExecTime() {
	return -1;
	
}

