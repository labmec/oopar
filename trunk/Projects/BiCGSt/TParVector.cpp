/* Generated by Together */
#include "TParVector.h"
#include "bicgdefs.h"

double & TParVector::operator[]( const int index ) const{
      return *fData[index];
}
TParVector::TParVector ()
{
}
long TParVector::GetClassID ()
{
	return TPARVECTOR_ID;
}
int TParVector::Write(OOPStorageBuffer * buf,int classid)
{
	TPZSaveable::Write(buf,classid);
//	buf->PkLong (TPARVECTOR_ID);
	vector < double *>::iterator i = fData.begin ();
	int aux = fData.size ();
	buf->PkInt (&aux);
	while (i != fData.end ()) {
		buf->PkDouble (*i, 1);
	}
	return 1;
}
int TParVector::Read(OOPStorageBuffer * buf, void *context)
{
	TPZSaveable::Read(buf,context);
	int aux = 0;
	int i = 0;
	buf->UpkInt (&aux);
	double * val;
	for (i = 0; i < aux; i++) {
		buf->UpkDouble (val, 1);
		fData.push_back (val);
	}
//	OOPSaveable::Unpack (buf);
	return 1;
}
void TParVector::SetVector (vector < double * >data)
{
#ifndef WIN32
#warning "Data should be changed to something else"
#endif
	fData = data;
}
void TParVector::Resize (int size)
{
	fData.resize (size);
}
OOPSaveable *TParVector::Restore (OOPReceiveStorage * buf) {
	TParVector *loc = new TParVector();
	loc->Read(buf,0);
	return loc;
}
