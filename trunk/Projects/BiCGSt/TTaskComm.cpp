/* Generated by Together */
#include "oopdatamanager.h"
#include "TTaskComm.h"
#include "bicgdefs.h"

TTaskComm::TTaskComm(int proc) : OOPTask(proc){
  fLongValue=0;
  fDoubleValue=0.;
  }
int TTaskComm::Unpack (OOPReceiveStorage * buf)
{
	OOPTask::Unpack (buf);
  long auxlong;
  buf->UpkLong(&auxlong);
  fLongValue=auxlong;
  double auxdouble;
  buf->UpkDouble(&auxdouble);
  fDoubleValue=auxdouble;
	return 0;
}
int TTaskComm::Pack (OOPSendStorage * buf)
{
//	OOPSaveable::Pack (buf);
	OOPTask::Pack (buf);
  buf->PkLong(&fLongValue);
  buf->PkDouble(&fDoubleValue);
	return 0;
}
OOPMReturnType TTaskComm::Execute ()
{
	int i;
	for (i = 0; i < fDataDepend.NElements (); i++) {
		if (fDataDepend.Dep (i).State () == EWriteAccess) {
			// dat->IncrementVersion();
			// DM->GetObjPtr(i->fDataId)->IncrementVersion();
#ifdef VERBOSE
			cout << "TTaskComm object id ";
			fDataDepend.Dep (i).ObjPtr ()->Id ().Print (cout);
			cout << "TTaskComm::Execute the previous version is " << endl;
			fDataDepend.Dep (i).ObjPtr ()->Version ().Print (cout);
#endif
			TaskLog << "TTaskComm object id " << fDataDepend.Dep (i).ObjPtr ()->Id ();
			TaskLog << "TTaskComm::Execute the previous version is "
				<< fDataDepend.Dep (i).ObjPtr ()->Version () << endl;
			OOPDataVersion ver =
				fDataDepend.Dep (i).ObjPtr ()->Version ();
			ver.Increment ();
			fDataDepend.Dep (i).ObjPtr ()->SetVersion (ver,
								   this->
								   Id ());
#ifdef VERBOSE
			cout << "TTaskComm::Execute the new version is " <<
				endl;
			fDataDepend.Dep (i).ObjPtr ()->Version ().
				Print (cout);
#endif
			TaskLog << "TTaskComm::Execute the new version is " <<
				fDataDepend.Dep (i).ObjPtr ()->Version () << endl;
		}
	}
	TaskFinished ();
	return ESuccess;	// execute the task, verifying that
}

OOPSaveable *TTaskComm::Restore (OOPReceiveStorage * buf) {
	TTaskComm *loc = new TTaskComm(0);
	loc->Unpack(buf);
	return loc;
}
/** Sets the value the communication task will transport */
void TTaskComm::SetValue(double val){
  fDoubleValue = val;
}
void TTaskComm::SetValue(long val){
  fLongValue = val;
}
