/* Generated by Together */

#include "TParAnalysis.h"

void TParAnalysis::ComputeFlux(TPartitionRelation * table){
	
	int ProcId = DM->GetProcID();
	
	// message #1.1 to pc:TParCompute
	TParCompute * pc = new TParCompute(ProcId);

	// message #1.2 to table:TPartitionRelation
	// TPartitionRelation * table = ;

	int npartitions = table->GetNPartitions();

	// message #1.3 to rhs:TParRhs
	TParRhs * rhs = new TParRhs[npartitions];

	// message #1.4 to state:TParState
	TParState * state = new TParState[npartitions];

	// message #1.5 to mesh:TParMesh
	TParMesh * mesh = new TParMesh[npartitions];

	// message #1.6 to ver:OOPDataVersion
	OOPDataVersion ver;
	OOPObjectId tableId = DM->SubmitObject(table, 1);
	pc->SetPartitionRelationId(tableId , ver);

	// message #1.7 to ver:OOPDataVersion
	int level = 0;
	int version = 0;
	int i = 0;
	ver.SetLevelVersion(level, version);
	OOPMDataState st = EReadAccess;
	for (i = 0; i < npartitions; i++) {
		// message #1.8.1 to DM:OOPDataManager
		OOPObjectId rhsId = DM->SubmitObject(&rhs[i], 1);

		// message #1.8.2 to pc:TParCompute
		pc->SetRhsId(rhsId);

		// message #1.8.3 to DM:OOPDataManager
		OOPObjectId stateId = DM->SubmitObject(&state[i], 1);

		// message #1.8.4 to pc:TParCompute
		pc->SetStateId(stateId);

		// message #1.8.5 to DM:OOPDataManager
		OOPObjectId meshId = DM->SubmitObject(&mesh[i], 1);

		// message #1.8.6 to pc:TParCompute
		pc->AddDependentData(stateId, st, ver);

		// message #1.8.7 to pc:TParCompute
		pc->AddDependentData(rhsId, st, ver);
		pc->AddDependentData(meshId, st, ver);
	}
	// message #1.9 to pc:TParCompute
	pc->Submit();
}
