/* Generated by Together */
#include "TParVector.h"
#include "fluxdefs.h"
class TPZStream;
TParVector::TParVector ()
{
}
long TParVector::GetClassID ()
{
	return TPARVECTOR_ID;
}
int TParVector::Write (TPZStream * buf)
{
	TPZSaveable::Write(*buf);
//	buf->PkLong (TPARVECTOR_ID);
	vector < double >::iterator i = fData.begin ();
	int aux = fData.size ();
	buf->Write (&aux);
	while (i != fData.end ()) {
		buf->Write (&(*i), 1);
	}
//	OOPSaveable::Pack (buf);
	return 1;
}
int TParVector::Read (TPZStream * buf)
{
	TPZSaveable::Read(*buf);
	int aux = 0;
	int i = 0;
	buf->Read (&aux);
	double val = 0.;
	for (i = 0; i < aux; i++) {
		buf->Read (&val, 1);
		fData.push_back (val);
	}
//	OOPSaveable::Unpack (buf);
	return 1;
}
void TParVector::SetVector (vector < double >data)
{
#ifndef WIN32
#warning "Data should be changed to something else"
#endif
	fData = data;
}
void TParVector::Resize (int size)
{
	fData.resize (size);
}
TPZSaveable *TParVector::Restore (TPZStream * buf) {
	TParVector *loc = new TParVector();
	loc->Read(buf);
	return loc;
}
