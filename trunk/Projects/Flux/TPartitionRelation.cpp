/* Generated by Together */

#include "TPartitionRelation.h"

TPartitionRelation::TPartitionRelation(int numpartitions) : fNumPartitions(numpartitions) {
  fRelation = new TContribution[numpartitions*numpartitions];
}

int TPartitionRelation::OutgoingContribution(int partition){
  int counter = 0,i;
  for(i=0; i<fNumPartitions; i++) if(GetRelation(partition,i).NContributions()) counter++;
  return counter;
}

int TPartitionRelation::IncomingContribution(int partition){
  int counter = 0,i;
  for(i=0; i<fNumPartitions; i++) if(GetRelation(i,partition).NContributions()) counter++;
  return counter;
}

int TPartitionRelation::GetNPartitions(){
  return fNumPartitions;
}


TPartitionRelation *TPartitionRelation::CreateRandom(int numpart) {
  TPartitionRelation *result =  new TPartitionRelation(numpart);
  int i,j;
  for(i=0; i<numpart; i++) for(j=0; j<numpart; j++) result->GetRelation(i,j).InitializeRandom();
  return result;
}

TContribution &TPartitionRelation::GetRelation(int parfrom, int parto) {
  return fRelation[parfrom+fNumPartitions*parto];
}

void TPartitionRelation::Print(ostream &out) {
  int i;
  for(i=0; i<fNumPartitions; i++) {
    out << "Partition " << i << " contributes to " << OutgoingContribution(i) << " partitions\n";
    out << "Partition " << i << " receives from " << IncomingContribution(i) << " partitions\n";
  }
}
