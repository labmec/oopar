/* Generated by Together */
#include "OOPDouble.h"

#include "ooperror.h"
#include <sstream>
#include <pzlog.h>
#ifdef LOG4CXX
#include <log4cxx/logger.h>
#include <log4cxx/basicconfigurator.h>
#include <log4cxx/propertyconfigurator.h>
#include <log4cxx/helpers/exception.h>
using namespace log4cxx;
using namespace log4cxx::helpers;
static LoggerPtr logger(Logger::getLogger("OOPAR.OOPDouble"));
#endif

OOPDouble::OOPDouble() : TPZSaveable(), fValue(0.)
{
}

int OOPDouble::ClassId() const {
    return OOPDOUBLE_ID;
}
void OOPDouble::Read(TPZStream & buf, void * context){
    TPZSaveable::Read(buf, context);
    buf.Read(&fValue);
    int clsid=0;
    buf.Read(&clsid);
    if(clsid!=ClassId()){
#ifdef LOGPZ      
      std::stringstream sout;
      sout << "ClassId missmatch on OOPDouble::Read";
      LOGPZ_ERROR(logger,sout.str());
#endif      
    }
}
void OOPDouble::Write(TPZStream & buf, int withclassid){
    TPZSaveable::Write(buf, withclassid);
    buf.Write(&fValue);
    int clsid = ClassId();
    buf.Write(&clsid);
}
